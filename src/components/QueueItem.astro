---
import { getSongById } from '../controllers/songController'
interface Props {
  songId: number,
  addedBy: string,
  position: number,
  userType: 'HOST' | 'ATTENDEE',
  queueItemId: number
  isPlaying: boolean
  priority: number
}

const {songId, addedBy, position, userType, queueItemId, isPlaying, priority } = Astro.props
const song = await getSongById(songId)
---

<li class={`queueItem${isPlaying ? ' notSortable' : ' sort'} ${userType.toLowerCase()}`}>
  {isPlaying ? 
    <span class="songPosition nowPlaying" title="Now Playing!">
      &#9658;
    </span>
    :
     <span class="songPosition">{position}</span> 
  }
  <div class="songInfo">
    <span class="queueSongTitle">Title: <strong>{song?.title}</strong></span>
    <span class="queueSongArtist">Artist: <strong>{song?.artist}</strong></span>
    <span class="queueSongPeformer">Added By: <strong>{addedBy}</strong></span>
  </div>
  {userType === 'HOST' && !isPlaying &&
    <button
      class="removeSongButton"
      hx-post="/partials/remove-song-from-queue"
      hx-swap="none"
      hx-confirm={`Are you sure you want to remove ${song?.title} from the queue?`}
      value={queueItemId}
      name="id" 
      title={`Remove ${song?.title} from the queue?`}
    >
      &times;
    </button>
  }
  <input type="hidden" name={`queueItem-${priority}`} value={queueItemId.toString()} />
</li>

<style>
.queueItem {
  position: relative;
  display: flex;
  flex-direction: row;
  padding: 0.5rem 1.5rem;
  margin: 0 -1.5rem;
  color: var(--white);
  align-items: center;
  border: 1px solid var(--grey05);
  &:nth-child(even) {
    background-color: var(--grey04);
    border: 1px solid var(--grey04);
  }
  .songPosition {
    margin-right: 1.5rem;
    font-size:2rem;
    min-width: 2.25rem;
  }
  .songInfo {
    display: flex;
    flex-direction: column;
    margin-right: 1.5rem;
  }
  .removeSongButton {
    margin-left: auto;
    font-size: 2rem;
    border: 0;
    color: var(--white);
    background: transparent;
    transform: scale(100%);
    transition: color .1s ease-in-out, transform .1s ease-in-out;
    &:hover {
      cursor: pointer;
      transform: scale(120%);
      color: var(--accent);
    }
    &:active {
      color: var(--grey02);
    }
  }
  &.sort.host {
    &:hover {
      cursor: grab;
      border: 1px solid var(--grey01);
      .songPosition {
        &::before {
          position:absolute;
          left: 0;
          content: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g fill="%23F7F8F7"><circle cx="8" cy="5" r="1"/><circle cx="8" cy="12" r="1"/><circle cx="8" cy="19" r="1"/><circle cx="16" cy="5" r="1"/><circle cx="16" cy="12" r="1"/><circle cx="16" cy="19" r="1"/></g></svg>');
          display: inline-block;
          width: 24px;
          height: 24px;
          vertical-align: middle;
          margin-right: 5px;
        }  
      }
    }
  }
  &.ghost {
    opacity: .7;
    background-color: var(--pink);
  }
}
</style>