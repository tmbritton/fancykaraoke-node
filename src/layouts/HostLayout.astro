---
import HeadMeta from '../components/HeadMeta.astro';
import HostFooter from '../components/HostFooter.astro';
import HostHeader from '../components/HostHeader.astro';

interface Props {
	title: string;
	partySlug: string;
	hasCurrentSong: boolean;
}

const { title, partySlug, hasCurrentSong } = Astro.props;
import '../styles/global.css'
---
<!doctype html>
<html lang="en">
	<HeadMeta title={title} />
	<body hx-boost>
		<HostHeader partySlug={partySlug} />
		<main class="hostMain">
			<div class="videoPane">
				<slot name="video"/>
			</div>
			<div class="sidePane">
				<slot name="side" />
			</div>
		</main>
		<HostFooter partySlug={partySlug} showQR={hasCurrentSong} />
		<script src="https://unpkg.com/htmx.org@1.9.9" integrity="sha384-QFjmbokDn2DjBjq+fM+8LUIVrAgqcNW2s0PjAxHETgRn9l4fvX31ZxDxvwQnyMOX" crossorigin="anonymous"></script>
		<script src="https://SortableJS.github.io/Sortable/Sortable.js"></script>
	</body>
</html>

<style>
	.hostMain {
		display: flex;
		flex-direction: row;
		padding: 1.5rem 2rem;
	}
	.videoPane {
		width: 75%;
		margin-right: 2rem;
	}
	.sidePane {
		width: 25%;
		padding: 0 1.5rem;
    max-height: calc(100vh - 150px - 65px - 50px);
    overflow-y: auto;
	}
</style>

<script>
	// Load the IFrame Player API code asynchronously.
	const tag = document.createElement('script');

	tag.src = "https://www.youtube.com/iframe_api";
	var firstScriptTag = document.getElementsByTagName('script')[0];
	firstScriptTag?.parentNode?.insertBefore(tag, firstScriptTag);

	// @ts-ignore
	window.onYouTubeIframeAPIReady = async function () {
		// @ts-ignore
		let player = await document.querySelector('lite-youtube')?.getYTPlayer();
		const videoData = player.getVideoData();
		debugger;
		const interval = window.setInterval(async () => {
			// Get player inside loop because otherwise after video ends it will 
			// continue loading new videos every second.
			player = await document.querySelector('lite-youtube')?.getYTPlayer();
			const playerState = player?.getPlayerState();

			/**
			 * -1 – not initiated
			 * 0 – Ended
			 * 1 – Playing
			 * 2 – Paused
			 * 3 – Buffering
			 * 5 – Cued
			 */
			if (playerState === -1) {
				player?.playVideo();
			}
			
			if (playerState === 0) {
				const event = new Event('videoEnd');
				document?.body?.dispatchEvent(event);
			}
		}, 1000)
	}
</script>

<script type="text/javascript" src="/js/handleQueueUpdates.js"></script>
<script type="text/javascript" src="/js/sortableQueue.js"></script>
<script>
  // This script will run only on the client-side
  import 'lite-youtube-embed/src/lite-yt-embed.js';
  import 'lite-youtube-embed/src/lite-yt-embed.css';
</script>

